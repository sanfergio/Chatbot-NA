// bot/state.js

const { client } = require("./client");

// Guarda os usu√°rios que j√° receberam a primeira mensagem
const usuariosAtendidos = new Set();

// Guarda os usu√°rios que est√£o em atendimento humano (o bot est√° pausado para eles)
const atendimentoHumano = new Set();

// Guarda os temporizadores por usu√°rio
const temporizadores = new Map();

// Define o tempo de inatividade: 5 minutos
const tempoInatividade = 5 * 60 * 1000;

// Delay artificial
const delay = (ms) => new Promise((res) => setTimeout(res, ms));

// Fun√ß√£o que inicia ou reinicia o temporizador para um usu√°rio
const iniciarTemporizador = (userId, chat) => {
  // Se j√° tiver temporizador, remove o antigo
  if (temporizadores.has(userId)) clearTimeout(temporizadores.get(userId));

  // Cria um novo temporizador
  const timeout = setTimeout(async () => {
    // Verifica se o usu√°rio estava em atendimento humano
    if (atendimentoHumano.has(userId)) {
      // Se estava, o bot avisa que voltou
      await chat.sendStateTyping();
      await delay(1000);
      await client.sendMessage(
        userId,
        "Ol√°! O atendimento com nossa equipe foi finalizado por inatividade. Se precisar de algo mais, estou √† disposi√ß√£o! √â s√≥ mandar uma mensagem que eu te mostro o menu. üòä"
      );

      // Remove o usu√°rio do estado de atendimento humano e da lista de atendidos
      // para que na pr√≥xima mensagem ele receba o menu como se fosse um novo contato.
      atendimentoHumano.delete(userId);
      usuariosAtendidos.delete(userId);
    } else {
      // Se n√£o estava em atendimento humano, √© a inatividade normal
      await chat.sendStateTyping();
      await delay(1000);
      await client.sendMessage(
        userId,
        "‚åõ A conversa foi encerrada por inatividade. Se precisar de ajuda novamente, √© s√≥ mandar uma mensagem!"
      );

      // Limpa os dados desse usu√°rio para recome√ßar na pr√≥xima intera√ß√£o
      usuariosAtendidos.delete(userId);
    }

    // Limpa o temporizador da mem√≥ria
    temporizadores.delete(userId);
  }, tempoInatividade);

  // Salva o novo temporizador
  temporizadores.set(userId, timeout);
};

module.exports = {
  iniciarTemporizador,
  usuariosAtendidos,
  atendimentoHumano,
  temporizadores,
};
